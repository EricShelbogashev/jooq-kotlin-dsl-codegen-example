/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import jooq.schema.Public
import jooq.schema.keys.ROUTES_TRANSFERS__ROUTES_TRANSFERS_TRANSFER_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_FROM_TRANSFER_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_TO_TRANSFER_ID_FKEY
import jooq.schema.keys.TRANSFERS_PKEY
import jooq.schema.keys.TRANSFERS__TRANSFERS_FROM_DEPARTMENT_ID_FKEY
import jooq.schema.keys.TRANSFERS__TRANSFERS_TO_DEPARTMENT_ID_FKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_FROM_TRANSFER_ID_FKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TO_TRANSFER_ID_FKEY
import jooq.schema.tables.Departments.DepartmentsPath
import jooq.schema.tables.Routes.RoutesPath
import jooq.schema.tables.RoutesTransfers.RoutesTransfersPath
import jooq.schema.tables.Tickets.TicketsPath
import jooq.schema.tables.TripsTransports.TripsTransportsPath
import jooq.schema.tables.records.TransfersRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Transfers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TransfersRecord>?,
    parentPath: InverseForeignKey<out Record, TransfersRecord>?,
    aliased: Table<TransfersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TransfersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.transfers</code>
         */
        val TRANSFERS: Transfers = Transfers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TransfersRecord> = TransfersRecord::class.java

    /**
     * The column <code>public.transfers.id</code>.
     */
    val ID: TableField<TransfersRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.transfers.from_department_id</code>.
     */
    val FROM_DEPARTMENT_ID: TableField<TransfersRecord, Int?> = createField(DSL.name("from_department_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.transfers.to_department_id</code>.
     */
    val TO_DEPARTMENT_ID: TableField<TransfersRecord, Int?> = createField(DSL.name("to_department_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.transfers.distance</code>.
     */
    val DISTANCE: TableField<TransfersRecord, Short?> = createField(DSL.name("distance"), SQLDataType.SMALLINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TransfersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TransfersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TransfersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.transfers</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.transfers</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.transfers</code> table reference
     */
    constructor(): this(DSL.name("transfers"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TransfersRecord>?, parentPath: InverseForeignKey<out Record, TransfersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TRANSFERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TransfersPath : Transfers, Path<TransfersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TransfersRecord>?, parentPath: InverseForeignKey<out Record, TransfersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TransfersRecord>): super(alias, aliased)
        override fun `as`(alias: String): TransfersPath = TransfersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TransfersPath = TransfersPath(alias, this)
        override fun `as`(alias: Table<*>): TransfersPath = TransfersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<TransfersRecord, Int?> = super.getIdentity() as Identity<TransfersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TransfersRecord> = TRANSFERS_PKEY
    override fun getReferences(): List<ForeignKey<TransfersRecord, *>> = listOf(TRANSFERS__TRANSFERS_FROM_DEPARTMENT_ID_FKEY, TRANSFERS__TRANSFERS_TO_DEPARTMENT_ID_FKEY)

    private lateinit var _transfersFromDepartmentIdFkey: DepartmentsPath

    /**
     * Get the implicit join path to the <code>public.departments</code> table,
     * via the <code>transfers_from_department_id_fkey</code> key.
     */
    fun transfersFromDepartmentIdFkey(): DepartmentsPath {
        if (!this::_transfersFromDepartmentIdFkey.isInitialized)
            _transfersFromDepartmentIdFkey = DepartmentsPath(this, TRANSFERS__TRANSFERS_FROM_DEPARTMENT_ID_FKEY, null)

        return _transfersFromDepartmentIdFkey;
    }

    val transfersFromDepartmentIdFkey: DepartmentsPath
        get(): DepartmentsPath = transfersFromDepartmentIdFkey()

    private lateinit var _transfersToDepartmentIdFkey: DepartmentsPath

    /**
     * Get the implicit join path to the <code>public.departments</code> table,
     * via the <code>transfers_to_department_id_fkey</code> key.
     */
    fun transfersToDepartmentIdFkey(): DepartmentsPath {
        if (!this::_transfersToDepartmentIdFkey.isInitialized)
            _transfersToDepartmentIdFkey = DepartmentsPath(this, TRANSFERS__TRANSFERS_TO_DEPARTMENT_ID_FKEY, null)

        return _transfersToDepartmentIdFkey;
    }

    val transfersToDepartmentIdFkey: DepartmentsPath
        get(): DepartmentsPath = transfersToDepartmentIdFkey()

    private lateinit var _routesTransfers: RoutesTransfersPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.routes_transfers</code> table
     */
    fun routesTransfers(): RoutesTransfersPath {
        if (!this::_routesTransfers.isInitialized)
            _routesTransfers = RoutesTransfersPath(this, null, ROUTES_TRANSFERS__ROUTES_TRANSFERS_TRANSFER_ID_FKEY.inverseKey)

        return _routesTransfers;
    }

    val routesTransfers: RoutesTransfersPath
        get(): RoutesTransfersPath = routesTransfers()

    private lateinit var _ticketsFromTransferIdFkey: TicketsPath

    /**
     * Get the implicit to-many join path to the <code>public.tickets</code>
     * table, via the <code>tickets_from_transfer_id_fkey</code> key
     */
    fun ticketsFromTransferIdFkey(): TicketsPath {
        if (!this::_ticketsFromTransferIdFkey.isInitialized)
            _ticketsFromTransferIdFkey = TicketsPath(this, null, TICKETS__TICKETS_FROM_TRANSFER_ID_FKEY.inverseKey)

        return _ticketsFromTransferIdFkey;
    }

    val ticketsFromTransferIdFkey: TicketsPath
        get(): TicketsPath = ticketsFromTransferIdFkey()

    private lateinit var _ticketsToTransferIdFkey: TicketsPath

    /**
     * Get the implicit to-many join path to the <code>public.tickets</code>
     * table, via the <code>tickets_to_transfer_id_fkey</code> key
     */
    fun ticketsToTransferIdFkey(): TicketsPath {
        if (!this::_ticketsToTransferIdFkey.isInitialized)
            _ticketsToTransferIdFkey = TicketsPath(this, null, TICKETS__TICKETS_TO_TRANSFER_ID_FKEY.inverseKey)

        return _ticketsToTransferIdFkey;
    }

    val ticketsToTransferIdFkey: TicketsPath
        get(): TicketsPath = ticketsToTransferIdFkey()

    private lateinit var _tripsTransportsFromTransferIdFkey: TripsTransportsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.trips_transports</code> table, via the
     * <code>trips_transports_from_transfer_id_fkey</code> key
     */
    fun tripsTransportsFromTransferIdFkey(): TripsTransportsPath {
        if (!this::_tripsTransportsFromTransferIdFkey.isInitialized)
            _tripsTransportsFromTransferIdFkey = TripsTransportsPath(this, null, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_FROM_TRANSFER_ID_FKEY.inverseKey)

        return _tripsTransportsFromTransferIdFkey;
    }

    val tripsTransportsFromTransferIdFkey: TripsTransportsPath
        get(): TripsTransportsPath = tripsTransportsFromTransferIdFkey()

    private lateinit var _tripsTransportsToTransferIdFkey: TripsTransportsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.trips_transports</code> table, via the
     * <code>trips_transports_to_transfer_id_fkey</code> key
     */
    fun tripsTransportsToTransferIdFkey(): TripsTransportsPath {
        if (!this::_tripsTransportsToTransferIdFkey.isInitialized)
            _tripsTransportsToTransferIdFkey = TripsTransportsPath(this, null, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TO_TRANSFER_ID_FKEY.inverseKey)

        return _tripsTransportsToTransferIdFkey;
    }

    val tripsTransportsToTransferIdFkey: TripsTransportsPath
        get(): TripsTransportsPath = tripsTransportsToTransferIdFkey()

    /**
     * Get the implicit many-to-many join path to the <code>public.routes</code>
     * table
     */
    val routes: RoutesPath
        get(): RoutesPath = routesTransfers().routes()
    override fun getChecks(): List<Check<TransfersRecord>> = listOf(
        Internal.createCheck(this, DSL.name("transfers_distance_check"), "((distance > 0))", true)
    )
    override fun `as`(alias: String): Transfers = Transfers(DSL.name(alias), this)
    override fun `as`(alias: Name): Transfers = Transfers(alias, this)
    override fun `as`(alias: Table<*>): Transfers = Transfers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Transfers = Transfers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Transfers = Transfers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Transfers = Transfers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Transfers = Transfers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Transfers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Transfers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Transfers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Transfers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Transfers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Transfers = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Transfers = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Transfers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Transfers = where(DSL.notExists(select))
}
