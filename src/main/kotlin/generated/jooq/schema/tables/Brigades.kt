/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import jooq.schema.Public
import jooq.schema.keys.BRIGADES_EMPLOYEES__BRIGADES_EMPLOYEES_T_BRIGADE_ID_FKEY
import jooq.schema.keys.BRIGADES_PKEY
import jooq.schema.keys.BRIGADES__BRIGADES_DEPARTMENT_ID_FKEY
import jooq.schema.keys.BRIGADE_VEHICLE__BRIGADE_VEHICLE_BRIGADE_ID_FKEY
import jooq.schema.keys.INSPECTIONS__INSPECTIONS_BRIGADE_ID_FKEY
import jooq.schema.keys.SCHEDULE__SCHEDULE_BRIGADE_ID_FKEY
import jooq.schema.tables.BrigadeVehicle.BrigadeVehiclePath
import jooq.schema.tables.BrigadesEmployees.BrigadesEmployeesPath
import jooq.schema.tables.Departments.DepartmentsPath
import jooq.schema.tables.Employees.EmployeesPath
import jooq.schema.tables.Inspections.InspectionsPath
import jooq.schema.tables.Schedule.SchedulePath
import jooq.schema.tables.Vehicles.VehiclesPath
import jooq.schema.tables.records.BrigadesRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Brigades(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BrigadesRecord>?,
    parentPath: InverseForeignKey<out Record, BrigadesRecord>?,
    aliased: Table<BrigadesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BrigadesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.brigades</code>
         */
        val BRIGADES: Brigades = Brigades()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BrigadesRecord> = BrigadesRecord::class.java

    /**
     * The column <code>public.brigades.id</code>.
     */
    val ID: TableField<BrigadesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.brigades.name</code>.
     */
    val NAME: TableField<BrigadesRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.brigades.department_id</code>.
     */
    val DEPARTMENT_ID: TableField<BrigadesRecord, Int?> = createField(DSL.name("department_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<BrigadesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BrigadesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BrigadesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.brigades</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.brigades</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.brigades</code> table reference
     */
    constructor(): this(DSL.name("brigades"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BrigadesRecord>?, parentPath: InverseForeignKey<out Record, BrigadesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BRIGADES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BrigadesPath : Brigades, Path<BrigadesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BrigadesRecord>?, parentPath: InverseForeignKey<out Record, BrigadesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BrigadesRecord>): super(alias, aliased)
        override fun `as`(alias: String): BrigadesPath = BrigadesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BrigadesPath = BrigadesPath(alias, this)
        override fun `as`(alias: Table<*>): BrigadesPath = BrigadesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<BrigadesRecord, Int?> = super.getIdentity() as Identity<BrigadesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<BrigadesRecord> = BRIGADES_PKEY
    override fun getReferences(): List<ForeignKey<BrigadesRecord, *>> = listOf(BRIGADES__BRIGADES_DEPARTMENT_ID_FKEY)

    private lateinit var _departments: DepartmentsPath

    /**
     * Get the implicit join path to the <code>public.departments</code> table.
     */
    fun departments(): DepartmentsPath {
        if (!this::_departments.isInitialized)
            _departments = DepartmentsPath(this, BRIGADES__BRIGADES_DEPARTMENT_ID_FKEY, null)

        return _departments;
    }

    val departments: DepartmentsPath
        get(): DepartmentsPath = departments()

    private lateinit var _brigadeVehicle: BrigadeVehiclePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.brigade_vehicle</code> table
     */
    fun brigadeVehicle(): BrigadeVehiclePath {
        if (!this::_brigadeVehicle.isInitialized)
            _brigadeVehicle = BrigadeVehiclePath(this, null, BRIGADE_VEHICLE__BRIGADE_VEHICLE_BRIGADE_ID_FKEY.inverseKey)

        return _brigadeVehicle;
    }

    val brigadeVehicle: BrigadeVehiclePath
        get(): BrigadeVehiclePath = brigadeVehicle()

    private lateinit var _brigadesEmployees: BrigadesEmployeesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.brigades_employees</code> table
     */
    fun brigadesEmployees(): BrigadesEmployeesPath {
        if (!this::_brigadesEmployees.isInitialized)
            _brigadesEmployees = BrigadesEmployeesPath(this, null, BRIGADES_EMPLOYEES__BRIGADES_EMPLOYEES_T_BRIGADE_ID_FKEY.inverseKey)

        return _brigadesEmployees;
    }

    val brigadesEmployees: BrigadesEmployeesPath
        get(): BrigadesEmployeesPath = brigadesEmployees()

    private lateinit var _inspections: InspectionsPath

    /**
     * Get the implicit to-many join path to the <code>public.inspections</code>
     * table
     */
    fun inspections(): InspectionsPath {
        if (!this::_inspections.isInitialized)
            _inspections = InspectionsPath(this, null, INSPECTIONS__INSPECTIONS_BRIGADE_ID_FKEY.inverseKey)

        return _inspections;
    }

    val inspections: InspectionsPath
        get(): InspectionsPath = inspections()

    private lateinit var _schedule: SchedulePath

    /**
     * Get the implicit to-many join path to the <code>public.schedule</code>
     * table
     */
    fun schedule(): SchedulePath {
        if (!this::_schedule.isInitialized)
            _schedule = SchedulePath(this, null, SCHEDULE__SCHEDULE_BRIGADE_ID_FKEY.inverseKey)

        return _schedule;
    }

    val schedule: SchedulePath
        get(): SchedulePath = schedule()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.vehicles</code> table
     */
    val vehicles: VehiclesPath
        get(): VehiclesPath = brigadeVehicle().vehicles()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.employees</code> table
     */
    val employees: EmployeesPath
        get(): EmployeesPath = brigadesEmployees().employees()
    override fun `as`(alias: String): Brigades = Brigades(DSL.name(alias), this)
    override fun `as`(alias: Name): Brigades = Brigades(alias, this)
    override fun `as`(alias: Table<*>): Brigades = Brigades(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Brigades = Brigades(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Brigades = Brigades(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Brigades = Brigades(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Brigades = Brigades(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Brigades = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Brigades = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Brigades = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Brigades = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Brigades = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Brigades = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Brigades = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Brigades = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Brigades = where(DSL.notExists(select))
}
