/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import jooq.schema.Public
import jooq.schema.enums.SeatType
import jooq.schema.keys.SEATS_PKEY
import jooq.schema.keys.SEATS__SEATS_VEHICLE_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_SEAT_ID_FKEY
import jooq.schema.tables.Tickets.TicketsPath
import jooq.schema.tables.Trips.TripsPath
import jooq.schema.tables.Vehicles.VehiclesPath
import jooq.schema.tables.records.SeatsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Seats(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, SeatsRecord>?,
    parentPath: InverseForeignKey<out Record, SeatsRecord>?,
    aliased: Table<SeatsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<SeatsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.seats</code>
         */
        val SEATS: Seats = Seats()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SeatsRecord> = SeatsRecord::class.java

    /**
     * The column <code>public.seats.id</code>.
     */
    val ID: TableField<SeatsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.seats.vehicle_id</code>.
     */
    val VEHICLE_ID: TableField<SeatsRecord, Int?> = createField(DSL.name("vehicle_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.seats.identifier</code>.
     */
    val IDENTIFIER: TableField<SeatsRecord, String?> = createField(DSL.name("identifier"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.seats.type</code>.
     */
    val TYPE: TableField<SeatsRecord, SeatType?> = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(SeatType::class.java), this, "")

    private constructor(alias: Name, aliased: Table<SeatsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<SeatsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<SeatsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.seats</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.seats</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.seats</code> table reference
     */
    constructor(): this(DSL.name("seats"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SeatsRecord>?, parentPath: InverseForeignKey<out Record, SeatsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SEATS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class SeatsPath : Seats, Path<SeatsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SeatsRecord>?, parentPath: InverseForeignKey<out Record, SeatsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<SeatsRecord>): super(alias, aliased)
        override fun `as`(alias: String): SeatsPath = SeatsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): SeatsPath = SeatsPath(alias, this)
        override fun `as`(alias: Table<*>): SeatsPath = SeatsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<SeatsRecord, Int?> = super.getIdentity() as Identity<SeatsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<SeatsRecord> = SEATS_PKEY
    override fun getReferences(): List<ForeignKey<SeatsRecord, *>> = listOf(SEATS__SEATS_VEHICLE_ID_FKEY)

    private lateinit var _vehicles: VehiclesPath

    /**
     * Get the implicit join path to the <code>public.vehicles</code> table.
     */
    fun vehicles(): VehiclesPath {
        if (!this::_vehicles.isInitialized)
            _vehicles = VehiclesPath(this, SEATS__SEATS_VEHICLE_ID_FKEY, null)

        return _vehicles;
    }

    val vehicles: VehiclesPath
        get(): VehiclesPath = vehicles()

    private lateinit var _tickets: TicketsPath

    /**
     * Get the implicit to-many join path to the <code>public.tickets</code>
     * table
     */
    fun tickets(): TicketsPath {
        if (!this::_tickets.isInitialized)
            _tickets = TicketsPath(this, null, TICKETS__TICKETS_SEAT_ID_FKEY.inverseKey)

        return _tickets;
    }

    val tickets: TicketsPath
        get(): TicketsPath = tickets()

    /**
     * Get the implicit many-to-many join path to the <code>public.trips</code>
     * table
     */
    val trips: TripsPath
        get(): TripsPath = tickets().trips()
    override fun `as`(alias: String): Seats = Seats(DSL.name(alias), this)
    override fun `as`(alias: Name): Seats = Seats(alias, this)
    override fun `as`(alias: Table<*>): Seats = Seats(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Seats = Seats(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Seats = Seats(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Seats = Seats(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Seats = Seats(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Seats = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Seats = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Seats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Seats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Seats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Seats = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Seats = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Seats = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Seats = where(DSL.notExists(select))
}
