/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime

import jooq.schema.Public
import jooq.schema.keys.BRIGADES_EMPLOYEES__BRIGADES_EMPLOYEES_T_EMPLOYEE_ID_FKEY
import jooq.schema.keys.EMPLOYEES_PKEY
import jooq.schema.keys.EMPLOYEES__EMPLOYEES_CATEGORY_ID_FKEY
import jooq.schema.keys.EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY
import jooq.schema.keys.MANAGERS__MANAGERS_EMPLOYEE_ID_FKEY1
import jooq.schema.keys.MEDICAL_EXAMINATIONS__MEDICAL_EXAMINATIONS_EMPLOYEE_ID_FKEY
import jooq.schema.keys.TICKET_TRANSACTIONS__TICKET_TRANSACTIONS_EMPLOYEE_ID_FKEY
import jooq.schema.tables.Brigades.BrigadesPath
import jooq.schema.tables.BrigadesEmployees.BrigadesEmployeesPath
import jooq.schema.tables.Departments.DepartmentsPath
import jooq.schema.tables.EmployeeCategories.EmployeeCategoriesPath
import jooq.schema.tables.Managers.ManagersPath
import jooq.schema.tables.MedicalExaminations.MedicalExaminationsPath
import jooq.schema.tables.TicketTransactions.TicketTransactionsPath
import jooq.schema.tables.records.EmployeesRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Employees(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, EmployeesRecord>?,
    parentPath: InverseForeignKey<out Record, EmployeesRecord>?,
    aliased: Table<EmployeesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<EmployeesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.employees</code>
         */
        val EMPLOYEES: Employees = Employees()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EmployeesRecord> = EmployeesRecord::class.java

    /**
     * The column <code>public.employees.id</code>.
     */
    val ID: TableField<EmployeesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.employees.first_name</code>.
     */
    val FIRST_NAME: TableField<EmployeesRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.employees.middle_name</code>.
     */
    val MIDDLE_NAME: TableField<EmployeesRecord, String?> = createField(DSL.name("middle_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.employees.last_name</code>.
     */
    val LAST_NAME: TableField<EmployeesRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.employees.birth_date</code>.
     */
    val BIRTH_DATE: TableField<EmployeesRecord, LocalDate?> = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.employees.hired_at</code>.
     */
    val HIRED_AT: TableField<EmployeesRecord, LocalDateTime?> = createField(DSL.name("hired_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.employees.sex</code>.
     */
    val SEX: TableField<EmployeesRecord, String?> = createField(DSL.name("sex"), SQLDataType.CHAR(1), this, "")

    /**
     * The column <code>public.employees.children_count</code>.
     */
    val CHILDREN_COUNT: TableField<EmployeesRecord, Int?> = createField(DSL.name("children_count"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.employees.salary</code>.
     */
    val SALARY: TableField<EmployeesRecord, BigDecimal?> = createField(DSL.name("salary"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.employees.department_id</code>.
     */
    val DEPARTMENT_ID: TableField<EmployeesRecord, Int?> = createField(DSL.name("department_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.employees.category_id</code>.
     */
    val CATEGORY_ID: TableField<EmployeesRecord, Int?> = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EmployeesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<EmployeesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<EmployeesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.employees</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.employees</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.employees</code> table reference
     */
    constructor(): this(DSL.name("employees"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, EmployeesRecord>?, parentPath: InverseForeignKey<out Record, EmployeesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, EMPLOYEES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class EmployeesPath : Employees, Path<EmployeesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, EmployeesRecord>?, parentPath: InverseForeignKey<out Record, EmployeesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<EmployeesRecord>): super(alias, aliased)
        override fun `as`(alias: String): EmployeesPath = EmployeesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): EmployeesPath = EmployeesPath(alias, this)
        override fun `as`(alias: Table<*>): EmployeesPath = EmployeesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<EmployeesRecord, Int?> = super.getIdentity() as Identity<EmployeesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<EmployeesRecord> = EMPLOYEES_PKEY
    override fun getReferences(): List<ForeignKey<EmployeesRecord, *>> = listOf(EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY, EMPLOYEES__EMPLOYEES_CATEGORY_ID_FKEY)

    private lateinit var _departments: DepartmentsPath

    /**
     * Get the implicit join path to the <code>public.departments</code> table.
     */
    fun departments(): DepartmentsPath {
        if (!this::_departments.isInitialized)
            _departments = DepartmentsPath(this, EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY, null)

        return _departments;
    }

    val departments: DepartmentsPath
        get(): DepartmentsPath = departments()

    private lateinit var _employeeCategories: EmployeeCategoriesPath

    /**
     * Get the implicit join path to the <code>public.employee_categories</code>
     * table.
     */
    fun employeeCategories(): EmployeeCategoriesPath {
        if (!this::_employeeCategories.isInitialized)
            _employeeCategories = EmployeeCategoriesPath(this, EMPLOYEES__EMPLOYEES_CATEGORY_ID_FKEY, null)

        return _employeeCategories;
    }

    val employeeCategories: EmployeeCategoriesPath
        get(): EmployeeCategoriesPath = employeeCategories()

    private lateinit var _brigadesEmployees: BrigadesEmployeesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.brigades_employees</code> table
     */
    fun brigadesEmployees(): BrigadesEmployeesPath {
        if (!this::_brigadesEmployees.isInitialized)
            _brigadesEmployees = BrigadesEmployeesPath(this, null, BRIGADES_EMPLOYEES__BRIGADES_EMPLOYEES_T_EMPLOYEE_ID_FKEY.inverseKey)

        return _brigadesEmployees;
    }

    val brigadesEmployees: BrigadesEmployeesPath
        get(): BrigadesEmployeesPath = brigadesEmployees()

    private lateinit var _managers: ManagersPath

    /**
     * Get the implicit to-many join path to the <code>public.managers</code>
     * table
     */
    fun managers(): ManagersPath {
        if (!this::_managers.isInitialized)
            _managers = ManagersPath(this, null, MANAGERS__MANAGERS_EMPLOYEE_ID_FKEY1.inverseKey)

        return _managers;
    }

    val managers: ManagersPath
        get(): ManagersPath = managers()

    private lateinit var _medicalExaminations: MedicalExaminationsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.medical_examinations</code> table
     */
    fun medicalExaminations(): MedicalExaminationsPath {
        if (!this::_medicalExaminations.isInitialized)
            _medicalExaminations = MedicalExaminationsPath(this, null, MEDICAL_EXAMINATIONS__MEDICAL_EXAMINATIONS_EMPLOYEE_ID_FKEY.inverseKey)

        return _medicalExaminations;
    }

    val medicalExaminations: MedicalExaminationsPath
        get(): MedicalExaminationsPath = medicalExaminations()

    private lateinit var _ticketTransactions: TicketTransactionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.ticket_transactions</code> table
     */
    fun ticketTransactions(): TicketTransactionsPath {
        if (!this::_ticketTransactions.isInitialized)
            _ticketTransactions = TicketTransactionsPath(this, null, TICKET_TRANSACTIONS__TICKET_TRANSACTIONS_EMPLOYEE_ID_FKEY.inverseKey)

        return _ticketTransactions;
    }

    val ticketTransactions: TicketTransactionsPath
        get(): TicketTransactionsPath = ticketTransactions()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.brigades</code> table
     */
    val brigades: BrigadesPath
        get(): BrigadesPath = brigadesEmployees().brigades()
    override fun getChecks(): List<Check<EmployeesRecord>> = listOf(
        Internal.createCheck(this, DSL.name("employees_children_count_check"), "((children_count >= 0))", true),
        Internal.createCheck(this, DSL.name("employees_salary_check"), "((salary > (0)::numeric))", true),
        Internal.createCheck(this, DSL.name("employees_sex_check"), "((sex = ANY (ARRAY['M'::bpchar, 'F'::bpchar])))", true)
    )
    override fun `as`(alias: String): Employees = Employees(DSL.name(alias), this)
    override fun `as`(alias: Name): Employees = Employees(alias, this)
    override fun `as`(alias: Table<*>): Employees = Employees(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Employees = Employees(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Employees = Employees(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Employees = Employees(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Employees = Employees(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Employees = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Employees = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Employees = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Employees = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Employees = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Employees = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Employees = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Employees = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Employees = where(DSL.notExists(select))
}
