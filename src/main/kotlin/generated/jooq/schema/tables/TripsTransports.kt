/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import jooq.schema.Public
import jooq.schema.indexes.IDX_TRIP_TRANSFER_CARRIAGE_UNIQUE
import jooq.schema.keys.TRIPS_TRANSPORTS_ID_KEY
import jooq.schema.keys.TRIPS_TRANSPORTS_PKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_FROM_TRANSFER_ID_FKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TO_TRANSFER_ID_FKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TRIP_ID_FKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_VEHICLE_ID_FKEY
import jooq.schema.tables.Transfers.TransfersPath
import jooq.schema.tables.Trips.TripsPath
import jooq.schema.tables.Vehicles.VehiclesPath
import jooq.schema.tables.records.TripsTransportsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TripsTransports(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TripsTransportsRecord>?,
    parentPath: InverseForeignKey<out Record, TripsTransportsRecord>?,
    aliased: Table<TripsTransportsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TripsTransportsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.trips_transports</code>
         */
        val TRIPS_TRANSPORTS: TripsTransports = TripsTransports()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TripsTransportsRecord> = TripsTransportsRecord::class.java

    /**
     * The column <code>public.trips_transports.id</code>.
     */
    val ID: TableField<TripsTransportsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.trips_transports.trip_id</code>.
     */
    val TRIP_ID: TableField<TripsTransportsRecord, Int?> = createField(DSL.name("trip_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.trips_transports.vehicle_id</code>.
     */
    val VEHICLE_ID: TableField<TripsTransportsRecord, Int?> = createField(DSL.name("vehicle_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.trips_transports.from_transfer_id</code>.
     */
    val FROM_TRANSFER_ID: TableField<TripsTransportsRecord, Int?> = createField(DSL.name("from_transfer_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.trips_transports.to_transfer_id</code>.
     */
    val TO_TRANSFER_ID: TableField<TripsTransportsRecord, Int?> = createField(DSL.name("to_transfer_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.trips_transports.carriage_number</code>.
     */
    val CARRIAGE_NUMBER: TableField<TripsTransportsRecord, Short?> = createField(DSL.name("carriage_number"), SQLDataType.SMALLINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TripsTransportsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TripsTransportsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TripsTransportsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.trips_transports</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.trips_transports</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.trips_transports</code> table reference
     */
    constructor(): this(DSL.name("trips_transports"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TripsTransportsRecord>?, parentPath: InverseForeignKey<out Record, TripsTransportsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TRIPS_TRANSPORTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TripsTransportsPath : TripsTransports, Path<TripsTransportsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TripsTransportsRecord>?, parentPath: InverseForeignKey<out Record, TripsTransportsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TripsTransportsRecord>): super(alias, aliased)
        override fun `as`(alias: String): TripsTransportsPath = TripsTransportsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TripsTransportsPath = TripsTransportsPath(alias, this)
        override fun `as`(alias: Table<*>): TripsTransportsPath = TripsTransportsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_TRIP_TRANSFER_CARRIAGE_UNIQUE)
    override fun getIdentity(): Identity<TripsTransportsRecord, Int?> = super.getIdentity() as Identity<TripsTransportsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TripsTransportsRecord> = TRIPS_TRANSPORTS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<TripsTransportsRecord>> = listOf(TRIPS_TRANSPORTS_ID_KEY)
    override fun getReferences(): List<ForeignKey<TripsTransportsRecord, *>> = listOf(TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TRIP_ID_FKEY, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_VEHICLE_ID_FKEY, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_FROM_TRANSFER_ID_FKEY, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TO_TRANSFER_ID_FKEY)

    private lateinit var _trips: TripsPath

    /**
     * Get the implicit join path to the <code>public.trips</code> table.
     */
    fun trips(): TripsPath {
        if (!this::_trips.isInitialized)
            _trips = TripsPath(this, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TRIP_ID_FKEY, null)

        return _trips;
    }

    val trips: TripsPath
        get(): TripsPath = trips()

    private lateinit var _vehicles: VehiclesPath

    /**
     * Get the implicit join path to the <code>public.vehicles</code> table.
     */
    fun vehicles(): VehiclesPath {
        if (!this::_vehicles.isInitialized)
            _vehicles = VehiclesPath(this, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_VEHICLE_ID_FKEY, null)

        return _vehicles;
    }

    val vehicles: VehiclesPath
        get(): VehiclesPath = vehicles()

    private lateinit var _tripsTransportsFromTransferIdFkey: TransfersPath

    /**
     * Get the implicit join path to the <code>public.transfers</code> table,
     * via the <code>trips_transports_from_transfer_id_fkey</code> key.
     */
    fun tripsTransportsFromTransferIdFkey(): TransfersPath {
        if (!this::_tripsTransportsFromTransferIdFkey.isInitialized)
            _tripsTransportsFromTransferIdFkey = TransfersPath(this, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_FROM_TRANSFER_ID_FKEY, null)

        return _tripsTransportsFromTransferIdFkey;
    }

    val tripsTransportsFromTransferIdFkey: TransfersPath
        get(): TransfersPath = tripsTransportsFromTransferIdFkey()

    private lateinit var _tripsTransportsToTransferIdFkey: TransfersPath

    /**
     * Get the implicit join path to the <code>public.transfers</code> table,
     * via the <code>trips_transports_to_transfer_id_fkey</code> key.
     */
    fun tripsTransportsToTransferIdFkey(): TransfersPath {
        if (!this::_tripsTransportsToTransferIdFkey.isInitialized)
            _tripsTransportsToTransferIdFkey = TransfersPath(this, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_TO_TRANSFER_ID_FKEY, null)

        return _tripsTransportsToTransferIdFkey;
    }

    val tripsTransportsToTransferIdFkey: TransfersPath
        get(): TransfersPath = tripsTransportsToTransferIdFkey()
    override fun `as`(alias: String): TripsTransports = TripsTransports(DSL.name(alias), this)
    override fun `as`(alias: Name): TripsTransports = TripsTransports(alias, this)
    override fun `as`(alias: Table<*>): TripsTransports = TripsTransports(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TripsTransports = TripsTransports(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TripsTransports = TripsTransports(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TripsTransports = TripsTransports(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TripsTransports = TripsTransports(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TripsTransports = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TripsTransports = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TripsTransports = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TripsTransports = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TripsTransports = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TripsTransports = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TripsTransports = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TripsTransports = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TripsTransports = where(DSL.notExists(select))
}
