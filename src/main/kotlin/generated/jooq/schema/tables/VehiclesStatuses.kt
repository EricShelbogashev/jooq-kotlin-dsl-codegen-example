/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import java.time.LocalDate
import java.time.LocalDateTime

import jooq.schema.Public
import jooq.schema.enums.VehicleStatus
import jooq.schema.enums.VehicleType
import jooq.schema.tables.records.VehiclesStatusesRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class VehiclesStatuses(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VehiclesStatusesRecord>?,
    parentPath: InverseForeignKey<out Record, VehiclesStatusesRecord>?,
    aliased: Table<VehiclesStatusesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VehiclesStatusesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "vehicles_statuses" as  SELECT v.id,
     v.vehicles_department_id,
     v.built_in,
     v.details,
     v.type,
     i.id AS inspection_id,
     i.conclusion,
     i.inspected_at,
     i.brigade_id,
     i.vehicle_id
    FROM (vehicles v
      LEFT JOIN ( SELECT ranked_inspections.id,
             ranked_inspections.details,
             ranked_inspections.inspected_at,
             ranked_inspections.vehicle_id,
             ranked_inspections.brigade_id,
             ranked_inspections.conclusion
            FROM ranked_inspections
           WHERE (ranked_inspections.rn = 1)) i ON ((v.id = i.vehicle_id)));
    """),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vehicles_statuses</code>
         */
        val VEHICLES_STATUSES: VehiclesStatuses = VehiclesStatuses()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VehiclesStatusesRecord> = VehiclesStatusesRecord::class.java

    /**
     * The column <code>public.vehicles_statuses.id</code>.
     */
    val ID: TableField<VehiclesStatusesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.vehicles_statuses.vehicles_department_id</code>.
     */
    val VEHICLES_DEPARTMENT_ID: TableField<VehiclesStatusesRecord, Int?> = createField(DSL.name("vehicles_department_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.vehicles_statuses.built_in</code>.
     */
    val BUILT_IN: TableField<VehiclesStatusesRecord, LocalDate?> = createField(DSL.name("built_in"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.vehicles_statuses.details</code>.
     */
    val DETAILS: TableField<VehiclesStatusesRecord, JSONB?> = createField(DSL.name("details"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.vehicles_statuses.type</code>.
     */
    val TYPE: TableField<VehiclesStatusesRecord, VehicleType?> = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(VehicleType::class.java), this, "")

    /**
     * The column <code>public.vehicles_statuses.inspection_id</code>.
     */
    val INSPECTION_ID: TableField<VehiclesStatusesRecord, Int?> = createField(DSL.name("inspection_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.vehicles_statuses.conclusion</code>.
     */
    val CONCLUSION: TableField<VehiclesStatusesRecord, VehicleStatus?> = createField(DSL.name("conclusion"), SQLDataType.VARCHAR.asEnumDataType(VehicleStatus::class.java), this, "")

    /**
     * The column <code>public.vehicles_statuses.inspected_at</code>.
     */
    val INSPECTED_AT: TableField<VehiclesStatusesRecord, LocalDateTime?> = createField(DSL.name("inspected_at"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.vehicles_statuses.brigade_id</code>.
     */
    val BRIGADE_ID: TableField<VehiclesStatusesRecord, Int?> = createField(DSL.name("brigade_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.vehicles_statuses.vehicle_id</code>.
     */
    val VEHICLE_ID: TableField<VehiclesStatusesRecord, Int?> = createField(DSL.name("vehicle_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<VehiclesStatusesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VehiclesStatusesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VehiclesStatusesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vehicles_statuses</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vehicles_statuses</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vehicles_statuses</code> table reference
     */
    constructor(): this(DSL.name("vehicles_statuses"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): VehiclesStatuses = VehiclesStatuses(DSL.name(alias), this)
    override fun `as`(alias: Name): VehiclesStatuses = VehiclesStatuses(alias, this)
    override fun `as`(alias: Table<*>): VehiclesStatuses = VehiclesStatuses(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VehiclesStatuses = VehiclesStatuses(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VehiclesStatuses = VehiclesStatuses(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VehiclesStatuses = VehiclesStatuses(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VehiclesStatuses = VehiclesStatuses(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VehiclesStatuses = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VehiclesStatuses = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VehiclesStatuses = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VehiclesStatuses = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VehiclesStatuses = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VehiclesStatuses = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VehiclesStatuses = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VehiclesStatuses = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VehiclesStatuses = where(DSL.notExists(select))
}
