/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import java.time.LocalDate

import jooq.schema.Public
import jooq.schema.enums.VehicleType
import jooq.schema.keys.BRIGADE_VEHICLE__BRIGADE_VEHICLE_VEHICLE_ID_FKEY
import jooq.schema.keys.INSPECTIONS__INSPECTIONS_VEHICLE_ID_FKEY
import jooq.schema.keys.SEATS__SEATS_VEHICLE_ID_FKEY
import jooq.schema.keys.TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_VEHICLE_ID_FKEY
import jooq.schema.keys.VEHICLES_PKEY
import jooq.schema.keys.VEHICLES__VEHICLES_VEHICLES_DEPARTMENT_ID_FKEY
import jooq.schema.tables.BrigadeVehicle.BrigadeVehiclePath
import jooq.schema.tables.Brigades.BrigadesPath
import jooq.schema.tables.Departments.DepartmentsPath
import jooq.schema.tables.Inspections.InspectionsPath
import jooq.schema.tables.Seats.SeatsPath
import jooq.schema.tables.TripsTransports.TripsTransportsPath
import jooq.schema.tables.records.VehiclesRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Vehicles(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VehiclesRecord>?,
    parentPath: InverseForeignKey<out Record, VehiclesRecord>?,
    aliased: Table<VehiclesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VehiclesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vehicles</code>
         */
        val VEHICLES: Vehicles = Vehicles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VehiclesRecord> = VehiclesRecord::class.java

    /**
     * The column <code>public.vehicles.id</code>.
     */
    val ID: TableField<VehiclesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.vehicles.vehicles_department_id</code>.
     */
    val VEHICLES_DEPARTMENT_ID: TableField<VehiclesRecord, Int?> = createField(DSL.name("vehicles_department_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.vehicles.details</code>.
     */
    val DETAILS: TableField<VehiclesRecord, JSONB?> = createField(DSL.name("details"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.vehicles.type</code>.
     */
    val TYPE: TableField<VehiclesRecord, VehicleType?> = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(VehicleType::class.java), this, "")

    /**
     * The column <code>public.vehicles.built_in</code>.
     */
    val BUILT_IN: TableField<VehiclesRecord, LocalDate?> = createField(DSL.name("built_in"), SQLDataType.LOCALDATE.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<VehiclesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VehiclesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VehiclesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vehicles</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vehicles</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vehicles</code> table reference
     */
    constructor(): this(DSL.name("vehicles"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VehiclesRecord>?, parentPath: InverseForeignKey<out Record, VehiclesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VEHICLES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VehiclesPath : Vehicles, Path<VehiclesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VehiclesRecord>?, parentPath: InverseForeignKey<out Record, VehiclesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VehiclesRecord>): super(alias, aliased)
        override fun `as`(alias: String): VehiclesPath = VehiclesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VehiclesPath = VehiclesPath(alias, this)
        override fun `as`(alias: Table<*>): VehiclesPath = VehiclesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<VehiclesRecord, Int?> = super.getIdentity() as Identity<VehiclesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<VehiclesRecord> = VEHICLES_PKEY
    override fun getReferences(): List<ForeignKey<VehiclesRecord, *>> = listOf(VEHICLES__VEHICLES_VEHICLES_DEPARTMENT_ID_FKEY)

    private lateinit var _departments: DepartmentsPath

    /**
     * Get the implicit join path to the <code>public.departments</code> table.
     */
    fun departments(): DepartmentsPath {
        if (!this::_departments.isInitialized)
            _departments = DepartmentsPath(this, VEHICLES__VEHICLES_VEHICLES_DEPARTMENT_ID_FKEY, null)

        return _departments;
    }

    val departments: DepartmentsPath
        get(): DepartmentsPath = departments()

    private lateinit var _brigadeVehicle: BrigadeVehiclePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.brigade_vehicle</code> table
     */
    fun brigadeVehicle(): BrigadeVehiclePath {
        if (!this::_brigadeVehicle.isInitialized)
            _brigadeVehicle = BrigadeVehiclePath(this, null, BRIGADE_VEHICLE__BRIGADE_VEHICLE_VEHICLE_ID_FKEY.inverseKey)

        return _brigadeVehicle;
    }

    val brigadeVehicle: BrigadeVehiclePath
        get(): BrigadeVehiclePath = brigadeVehicle()

    private lateinit var _inspections: InspectionsPath

    /**
     * Get the implicit to-many join path to the <code>public.inspections</code>
     * table
     */
    fun inspections(): InspectionsPath {
        if (!this::_inspections.isInitialized)
            _inspections = InspectionsPath(this, null, INSPECTIONS__INSPECTIONS_VEHICLE_ID_FKEY.inverseKey)

        return _inspections;
    }

    val inspections: InspectionsPath
        get(): InspectionsPath = inspections()

    private lateinit var _seats: SeatsPath

    /**
     * Get the implicit to-many join path to the <code>public.seats</code> table
     */
    fun seats(): SeatsPath {
        if (!this::_seats.isInitialized)
            _seats = SeatsPath(this, null, SEATS__SEATS_VEHICLE_ID_FKEY.inverseKey)

        return _seats;
    }

    val seats: SeatsPath
        get(): SeatsPath = seats()

    private lateinit var _tripsTransports: TripsTransportsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.trips_transports</code> table
     */
    fun tripsTransports(): TripsTransportsPath {
        if (!this::_tripsTransports.isInitialized)
            _tripsTransports = TripsTransportsPath(this, null, TRIPS_TRANSPORTS__TRIPS_TRANSPORTS_VEHICLE_ID_FKEY.inverseKey)

        return _tripsTransports;
    }

    val tripsTransports: TripsTransportsPath
        get(): TripsTransportsPath = tripsTransports()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.brigades</code> table
     */
    val brigades: BrigadesPath
        get(): BrigadesPath = brigadeVehicle().brigades()
    override fun `as`(alias: String): Vehicles = Vehicles(DSL.name(alias), this)
    override fun `as`(alias: Name): Vehicles = Vehicles(alias, this)
    override fun `as`(alias: Table<*>): Vehicles = Vehicles(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Vehicles = Vehicles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Vehicles = Vehicles(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Vehicles = Vehicles(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Vehicles = Vehicles(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Vehicles = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Vehicles = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Vehicles = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Vehicles = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Vehicles = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Vehicles = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Vehicles = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Vehicles = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Vehicles = where(DSL.notExists(select))
}
