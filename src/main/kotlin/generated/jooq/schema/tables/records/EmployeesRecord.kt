/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables.records


import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime

import jooq.schema.tables.Employees

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EmployeesRecord() : UpdatableRecordImpl<EmployeesRecord>(Employees.EMPLOYEES) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var firstName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var middleName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var lastName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var birthDate: LocalDate?
        set(value): Unit = set(4, value)
        get(): LocalDate? = get(4) as LocalDate?

    open var hiredAt: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var sex: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var childrenCount: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var salary: BigDecimal?
        set(value): Unit = set(8, value)
        get(): BigDecimal? = get(8) as BigDecimal?

    open var departmentId: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    open var categoryId: Int?
        set(value): Unit = set(10, value)
        get(): Int? = get(10) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised EmployeesRecord
     */
    constructor(id: Int? = null, firstName: String? = null, middleName: String? = null, lastName: String? = null, birthDate: LocalDate? = null, hiredAt: LocalDateTime? = null, sex: String? = null, childrenCount: Int? = null, salary: BigDecimal? = null, departmentId: Int? = null, categoryId: Int? = null): this() {
        this.id = id
        this.firstName = firstName
        this.middleName = middleName
        this.lastName = lastName
        this.birthDate = birthDate
        this.hiredAt = hiredAt
        this.sex = sex
        this.childrenCount = childrenCount
        this.salary = salary
        this.departmentId = departmentId
        this.categoryId = categoryId
        resetChangedOnNotNull()
    }
}
