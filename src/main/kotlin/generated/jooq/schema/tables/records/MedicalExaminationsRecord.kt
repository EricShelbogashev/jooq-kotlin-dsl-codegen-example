/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables.records


import java.time.LocalDateTime

import jooq.schema.enums.MedicalStatus
import jooq.schema.tables.MedicalExaminations

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MedicalExaminationsRecord() : UpdatableRecordImpl<MedicalExaminationsRecord>(MedicalExaminations.MEDICAL_EXAMINATIONS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var testedAt: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var status: MedicalStatus?
        set(value): Unit = set(2, value)
        get(): MedicalStatus? = get(2) as MedicalStatus?

    open var comment: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var employeeId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised MedicalExaminationsRecord
     */
    constructor(id: Int? = null, testedAt: LocalDateTime? = null, status: MedicalStatus? = null, comment: String? = null, employeeId: Int? = null): this() {
        this.id = id
        this.testedAt = testedAt
        this.status = status
        this.comment = comment
        this.employeeId = employeeId
        resetChangedOnNotNull()
    }
}
