/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables.records


import java.time.LocalDateTime

import jooq.schema.enums.VehicleStatus
import jooq.schema.tables.Inspections

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InspectionsRecord() : UpdatableRecordImpl<InspectionsRecord>(Inspections.INSPECTIONS) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var details: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var inspectedAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var vehicleId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var brigadeId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var conclusion: VehicleStatus?
        set(value): Unit = set(5, value)
        get(): VehicleStatus? = get(5) as VehicleStatus?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised InspectionsRecord
     */
    constructor(id: Int? = null, details: String? = null, inspectedAt: LocalDateTime? = null, vehicleId: Int? = null, brigadeId: Int? = null, conclusion: VehicleStatus? = null): this() {
        this.id = id
        this.details = details
        this.inspectedAt = inspectedAt
        this.vehicleId = vehicleId
        this.brigadeId = brigadeId
        this.conclusion = conclusion
        resetChangedOnNotNull()
    }
}
