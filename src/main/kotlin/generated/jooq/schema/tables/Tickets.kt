/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import java.math.BigDecimal

import jooq.schema.Public
import jooq.schema.keys.TICKETS_ID_KEY
import jooq.schema.keys.TICKETS_PKEY
import jooq.schema.keys.TICKETS__TICKETS_FROM_TRANSFER_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_KIOSK_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_SEAT_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_TO_TRANSFER_ID_FKEY
import jooq.schema.keys.TICKETS__TICKETS_TRIP_ID_FKEY
import jooq.schema.keys.TICKET_TRANSACTIONS__TICKET_TRANSACTIONS_TICKET_ID_FKEY
import jooq.schema.tables.Kiosks.KiosksPath
import jooq.schema.tables.Seats.SeatsPath
import jooq.schema.tables.TicketTransactions.TicketTransactionsPath
import jooq.schema.tables.Transfers.TransfersPath
import jooq.schema.tables.Trips.TripsPath
import jooq.schema.tables.records.TicketsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tickets(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TicketsRecord>?,
    parentPath: InverseForeignKey<out Record, TicketsRecord>?,
    aliased: Table<TicketsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TicketsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.tickets</code>
         */
        val TICKETS: Tickets = Tickets()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TicketsRecord> = TicketsRecord::class.java

    /**
     * The column <code>public.tickets.id</code>.
     */
    val ID: TableField<TicketsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.tickets.trip_id</code>.
     */
    val TRIP_ID: TableField<TicketsRecord, Int?> = createField(DSL.name("trip_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.tickets.seat_id</code>.
     */
    val SEAT_ID: TableField<TicketsRecord, Int?> = createField(DSL.name("seat_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.tickets.price</code>.
     */
    val PRICE: TableField<TicketsRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.tickets.luggage_flag</code>.
     */
    val LUGGAGE_FLAG: TableField<TicketsRecord, Boolean?> = createField(DSL.name("luggage_flag"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>public.tickets.kiosk_id</code>.
     */
    val KIOSK_ID: TableField<TicketsRecord, Int?> = createField(DSL.name("kiosk_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.tickets.from_transfer_id</code>.
     */
    val FROM_TRANSFER_ID: TableField<TicketsRecord, Int?> = createField(DSL.name("from_transfer_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.tickets.to_transfer_id</code>.
     */
    val TO_TRANSFER_ID: TableField<TicketsRecord, Int?> = createField(DSL.name("to_transfer_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TicketsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TicketsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TicketsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.tickets</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tickets</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tickets</code> table reference
     */
    constructor(): this(DSL.name("tickets"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TicketsRecord>?, parentPath: InverseForeignKey<out Record, TicketsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TICKETS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TicketsPath : Tickets, Path<TicketsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TicketsRecord>?, parentPath: InverseForeignKey<out Record, TicketsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TicketsRecord>): super(alias, aliased)
        override fun `as`(alias: String): TicketsPath = TicketsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TicketsPath = TicketsPath(alias, this)
        override fun `as`(alias: Table<*>): TicketsPath = TicketsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<TicketsRecord, Int?> = super.getIdentity() as Identity<TicketsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TicketsRecord> = TICKETS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<TicketsRecord>> = listOf(TICKETS_ID_KEY)
    override fun getReferences(): List<ForeignKey<TicketsRecord, *>> = listOf(TICKETS__TICKETS_TRIP_ID_FKEY, TICKETS__TICKETS_SEAT_ID_FKEY, TICKETS__TICKETS_KIOSK_ID_FKEY, TICKETS__TICKETS_FROM_TRANSFER_ID_FKEY, TICKETS__TICKETS_TO_TRANSFER_ID_FKEY)

    private lateinit var _trips: TripsPath

    /**
     * Get the implicit join path to the <code>public.trips</code> table.
     */
    fun trips(): TripsPath {
        if (!this::_trips.isInitialized)
            _trips = TripsPath(this, TICKETS__TICKETS_TRIP_ID_FKEY, null)

        return _trips;
    }

    val trips: TripsPath
        get(): TripsPath = trips()

    private lateinit var _seats: SeatsPath

    /**
     * Get the implicit join path to the <code>public.seats</code> table.
     */
    fun seats(): SeatsPath {
        if (!this::_seats.isInitialized)
            _seats = SeatsPath(this, TICKETS__TICKETS_SEAT_ID_FKEY, null)

        return _seats;
    }

    val seats: SeatsPath
        get(): SeatsPath = seats()

    private lateinit var _kiosks: KiosksPath

    /**
     * Get the implicit join path to the <code>public.kiosks</code> table.
     */
    fun kiosks(): KiosksPath {
        if (!this::_kiosks.isInitialized)
            _kiosks = KiosksPath(this, TICKETS__TICKETS_KIOSK_ID_FKEY, null)

        return _kiosks;
    }

    val kiosks: KiosksPath
        get(): KiosksPath = kiosks()

    private lateinit var _ticketsFromTransferIdFkey: TransfersPath

    /**
     * Get the implicit join path to the <code>public.transfers</code> table,
     * via the <code>tickets_from_transfer_id_fkey</code> key.
     */
    fun ticketsFromTransferIdFkey(): TransfersPath {
        if (!this::_ticketsFromTransferIdFkey.isInitialized)
            _ticketsFromTransferIdFkey = TransfersPath(this, TICKETS__TICKETS_FROM_TRANSFER_ID_FKEY, null)

        return _ticketsFromTransferIdFkey;
    }

    val ticketsFromTransferIdFkey: TransfersPath
        get(): TransfersPath = ticketsFromTransferIdFkey()

    private lateinit var _ticketsToTransferIdFkey: TransfersPath

    /**
     * Get the implicit join path to the <code>public.transfers</code> table,
     * via the <code>tickets_to_transfer_id_fkey</code> key.
     */
    fun ticketsToTransferIdFkey(): TransfersPath {
        if (!this::_ticketsToTransferIdFkey.isInitialized)
            _ticketsToTransferIdFkey = TransfersPath(this, TICKETS__TICKETS_TO_TRANSFER_ID_FKEY, null)

        return _ticketsToTransferIdFkey;
    }

    val ticketsToTransferIdFkey: TransfersPath
        get(): TransfersPath = ticketsToTransferIdFkey()

    private lateinit var _ticketTransactions: TicketTransactionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.ticket_transactions</code> table
     */
    fun ticketTransactions(): TicketTransactionsPath {
        if (!this::_ticketTransactions.isInitialized)
            _ticketTransactions = TicketTransactionsPath(this, null, TICKET_TRANSACTIONS__TICKET_TRANSACTIONS_TICKET_ID_FKEY.inverseKey)

        return _ticketTransactions;
    }

    val ticketTransactions: TicketTransactionsPath
        get(): TicketTransactionsPath = ticketTransactions()
    override fun getChecks(): List<Check<TicketsRecord>> = listOf(
        Internal.createCheck(this, DSL.name("tickets_price_check"), "((price > (0)::numeric))", true)
    )
    override fun `as`(alias: String): Tickets = Tickets(DSL.name(alias), this)
    override fun `as`(alias: Name): Tickets = Tickets(alias, this)
    override fun `as`(alias: Table<*>): Tickets = Tickets(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tickets = Tickets(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tickets = Tickets(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Tickets = Tickets(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Tickets = Tickets(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Tickets = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Tickets = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Tickets = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Tickets = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Tickets = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Tickets = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Tickets = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Tickets = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Tickets = where(DSL.notExists(select))
}
