/*
 * This file is generated by jOOQ.
 */
package jooq.schema.tables


import jooq.schema.Public
import jooq.schema.keys.BRIGADES__BRIGADES_DEPARTMENT_ID_FKEY
import jooq.schema.keys.DEPARTMENTS_PKEY
import jooq.schema.keys.DEPARTMENTS__DEPARTMENTS_LOCATION_ID_FKEY
import jooq.schema.keys.EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY
import jooq.schema.keys.MANAGERS__MANAGERS_EMPLOYEE_ID_FKEY
import jooq.schema.keys.TRANSFERS__TRANSFERS_FROM_DEPARTMENT_ID_FKEY
import jooq.schema.keys.TRANSFERS__TRANSFERS_TO_DEPARTMENT_ID_FKEY
import jooq.schema.keys.VEHICLES__VEHICLES_VEHICLES_DEPARTMENT_ID_FKEY
import jooq.schema.tables.Brigades.BrigadesPath
import jooq.schema.tables.Employees.EmployeesPath
import jooq.schema.tables.Locations.LocationsPath
import jooq.schema.tables.Managers.ManagersPath
import jooq.schema.tables.Transfers.TransfersPath
import jooq.schema.tables.Vehicles.VehiclesPath
import jooq.schema.tables.records.DepartmentsRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Departments(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DepartmentsRecord>?,
    parentPath: InverseForeignKey<out Record, DepartmentsRecord>?,
    aliased: Table<DepartmentsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DepartmentsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.departments</code>
         */
        val DEPARTMENTS: Departments = Departments()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DepartmentsRecord> = DepartmentsRecord::class.java

    /**
     * The column <code>public.departments.id</code>.
     */
    val ID: TableField<DepartmentsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.departments.name</code>.
     */
    val NAME: TableField<DepartmentsRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.departments.location_id</code>.
     */
    val LOCATION_ID: TableField<DepartmentsRecord, Int?> = createField(DSL.name("location_id"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<DepartmentsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DepartmentsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DepartmentsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.departments</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.departments</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.departments</code> table reference
     */
    constructor(): this(DSL.name("departments"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DepartmentsRecord>?, parentPath: InverseForeignKey<out Record, DepartmentsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DEPARTMENTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DepartmentsPath : Departments, Path<DepartmentsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DepartmentsRecord>?, parentPath: InverseForeignKey<out Record, DepartmentsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DepartmentsRecord>): super(alias, aliased)
        override fun `as`(alias: String): DepartmentsPath = DepartmentsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DepartmentsPath = DepartmentsPath(alias, this)
        override fun `as`(alias: Table<*>): DepartmentsPath = DepartmentsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<DepartmentsRecord, Int?> = super.getIdentity() as Identity<DepartmentsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<DepartmentsRecord> = DEPARTMENTS_PKEY
    override fun getReferences(): List<ForeignKey<DepartmentsRecord, *>> = listOf(DEPARTMENTS__DEPARTMENTS_LOCATION_ID_FKEY)

    private lateinit var _locations: LocationsPath

    /**
     * Get the implicit join path to the <code>public.locations</code> table.
     */
    fun locations(): LocationsPath {
        if (!this::_locations.isInitialized)
            _locations = LocationsPath(this, DEPARTMENTS__DEPARTMENTS_LOCATION_ID_FKEY, null)

        return _locations;
    }

    val locations: LocationsPath
        get(): LocationsPath = locations()

    private lateinit var _brigades: BrigadesPath

    /**
     * Get the implicit to-many join path to the <code>public.brigades</code>
     * table
     */
    fun brigades(): BrigadesPath {
        if (!this::_brigades.isInitialized)
            _brigades = BrigadesPath(this, null, BRIGADES__BRIGADES_DEPARTMENT_ID_FKEY.inverseKey)

        return _brigades;
    }

    val brigades: BrigadesPath
        get(): BrigadesPath = brigades()

    private lateinit var _employees: EmployeesPath

    /**
     * Get the implicit to-many join path to the <code>public.employees</code>
     * table
     */
    fun employees(): EmployeesPath {
        if (!this::_employees.isInitialized)
            _employees = EmployeesPath(this, null, EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY.inverseKey)

        return _employees;
    }

    val employees: EmployeesPath
        get(): EmployeesPath = employees()

    private lateinit var _managers: ManagersPath

    /**
     * Get the implicit to-many join path to the <code>public.managers</code>
     * table
     */
    fun managers(): ManagersPath {
        if (!this::_managers.isInitialized)
            _managers = ManagersPath(this, null, MANAGERS__MANAGERS_EMPLOYEE_ID_FKEY.inverseKey)

        return _managers;
    }

    val managers: ManagersPath
        get(): ManagersPath = managers()

    private lateinit var _transfersFromDepartmentIdFkey: TransfersPath

    /**
     * Get the implicit to-many join path to the <code>public.transfers</code>
     * table, via the <code>transfers_from_department_id_fkey</code> key
     */
    fun transfersFromDepartmentIdFkey(): TransfersPath {
        if (!this::_transfersFromDepartmentIdFkey.isInitialized)
            _transfersFromDepartmentIdFkey = TransfersPath(this, null, TRANSFERS__TRANSFERS_FROM_DEPARTMENT_ID_FKEY.inverseKey)

        return _transfersFromDepartmentIdFkey;
    }

    val transfersFromDepartmentIdFkey: TransfersPath
        get(): TransfersPath = transfersFromDepartmentIdFkey()

    private lateinit var _transfersToDepartmentIdFkey: TransfersPath

    /**
     * Get the implicit to-many join path to the <code>public.transfers</code>
     * table, via the <code>transfers_to_department_id_fkey</code> key
     */
    fun transfersToDepartmentIdFkey(): TransfersPath {
        if (!this::_transfersToDepartmentIdFkey.isInitialized)
            _transfersToDepartmentIdFkey = TransfersPath(this, null, TRANSFERS__TRANSFERS_TO_DEPARTMENT_ID_FKEY.inverseKey)

        return _transfersToDepartmentIdFkey;
    }

    val transfersToDepartmentIdFkey: TransfersPath
        get(): TransfersPath = transfersToDepartmentIdFkey()

    private lateinit var _vehicles: VehiclesPath

    /**
     * Get the implicit to-many join path to the <code>public.vehicles</code>
     * table
     */
    fun vehicles(): VehiclesPath {
        if (!this::_vehicles.isInitialized)
            _vehicles = VehiclesPath(this, null, VEHICLES__VEHICLES_VEHICLES_DEPARTMENT_ID_FKEY.inverseKey)

        return _vehicles;
    }

    val vehicles: VehiclesPath
        get(): VehiclesPath = vehicles()
    override fun `as`(alias: String): Departments = Departments(DSL.name(alias), this)
    override fun `as`(alias: Name): Departments = Departments(alias, this)
    override fun `as`(alias: Table<*>): Departments = Departments(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Departments = Departments(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Departments = Departments(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Departments = Departments(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Departments = Departments(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Departments = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Departments = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Departments = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Departments = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Departments = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Departments = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Departments = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Departments = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Departments = where(DSL.notExists(select))
}
